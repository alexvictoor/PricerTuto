// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PricerTuto.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BlackSholes princing")]
    public partial class BlackSholesPrincingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BlackSholesPricingFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BlackSholes princing", "In order trade\r\nAs a trader\r\nI want to price options", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Be able to price an european Call")]
        public virtual void BeAbleToPriceAnEuropeanCall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Be able to price an european Call", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "spot",
                        "strike",
                        "maturity",
                        "rate",
                        "volatility"});
            table1.AddRow(new string[] {
                        "Call",
                        "564.51",
                        "565",
                        "6 months",
                        "0.01",
                        "0.225"});
#line 7
 testRunner.Given("the following option:", ((string)(null)), table1);
#line 10
 testRunner.When("I compute the price");
#line 11
 testRunner.Then("the result should be 43.95");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Be able to price an european Option")]
        [NUnit.Framework.TestCaseAttribute("Put", "564.51", "565", "6 months", "0.01", "0.225", "43.95", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Call", "564.51", "565", "6 months", "0.01", "0.225", "43.95", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Call", "564.51", "565", "1 year", "0.01", "0.225", "63.32", new string[0])]
        public virtual void BeAbleToPriceAnEuropeanOption(string type, string spot, string strike, string maturity, string rate, string volatility, string price, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Be able to price an european Option", exampleTags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "spot",
                        "strike",
                        "maturity",
                        "rate",
                        "volatility"});
            table2.AddRow(new string[] {
                        string.Format("{0}", type),
                        string.Format("{0}", spot),
                        string.Format("{0}", strike),
                        string.Format("{0}", maturity),
                        string.Format("{0}", rate),
                        string.Format("{0}", volatility)});
#line 14
 testRunner.Given("the following option:", ((string)(null)), table2);
#line 17
 testRunner.When("I compute the price");
#line 18
 testRunner.Then(string.Format("the result should be {0}", price));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Be able to price an european Call with market data")]
        public virtual void BeAbleToPriceAnEuropeanCallWithMarketData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Be able to price an european Call with market data", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("the market rate: 0.01");
#line 28
 testRunner.And("the market spot for underlying \"NASDAQ:GOOG\": 564.51");
#line 29
 testRunner.And("the market volatility for underlying \"NASDAQ:GOOG\" since 6 months: 0.225");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "strike",
                        "maturity",
                        "underlying"});
            table3.AddRow(new string[] {
                        "Call",
                        "565",
                        "6 months",
                        "NASDAQ:GOOG"});
#line 30
 testRunner.When("I compute the price with market data the option:", ((string)(null)), table3);
#line 33
 testRunner.Then("the result should be 43.95");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
